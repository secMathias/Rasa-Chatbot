{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'ChatbotBubble',\n  props: ['isVisible'],\n  data() {\n    return {\n      newMessage: '',\n      messages: [{\n        id: 0,\n        text: 'Hello! How can I help you today?',\n        isUser: false\n      }]\n    };\n  },\n  methods: {\n    closeChatbot() {\n      this.$emit('toggle-chatbot');\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const message = {\n          id: Date.now(),\n          text: this.newMessage,\n          isUser: true\n        };\n        this.messages.push(message);\n        this.newMessage = '';\n        try {\n          const response = await axios.post('http://localhost:8000/api/chat', message);\n          console.log('Response:', response.data);\n          // Optionally, add response data to messages\n          this.messages.push({\n            id: Date.now(),\n            text: response.data.message,\n            isUser: false\n          });\n        } catch (error) {\n          console.error('Error sending message:', error);\n          alert('Failed to send message to the server.');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","data","newMessage","messages","id","text","isUser","methods","closeChatbot","$emit","sendMessage","trim","message","Date","now","push","response","post","console","log","error","alert"],"sources":["/Users/maclaptop/Documents/VSCode/VUE_Chatbot/vue-chatbot/src/components/ChatbotBubble.vue"],"sourcesContent":["<template>\n  <div v-if=\"isVisible\" class=\"chatbot-bubble\">\n    <div class=\"chatbot-header\">\n      <h4>Chatbot</h4>\n      <button @click=\"closeChatbot\" class=\"close-btn\">&times;</button>\n    </div>\n    <div class=\"chatbot-body\">\n      <div \n        v-for=\"message in messages\" \n        :key=\"message.id\" \n        :class=\"['message', message.isUser ? 'user-message' : 'chatbot-message']\"\n      >\n        <p>{{ message.text }}</p>\n      </div>\n    </div>\n    <div class=\"chatbot-footer\">\n      <form @submit.prevent=\"sendMessage\">\n        <input \n          type=\"text\" \n          v-model=\"newMessage\" \n          placeholder=\"Type a message...\" \n          @keyup.enter=\"sendMessage\"\n        />\n        <button type=\"submit\" class=\"send-btn\">Send</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ChatbotBubble',\n  props: ['isVisible'],\n  data() {\n    return {\n      newMessage: '',\n      messages: [\n        { id: 0, text: 'Hello! How can I help you today?', isUser: false }\n      ]\n    };\n  },\n  methods: {\n    closeChatbot() {\n      this.$emit('toggle-chatbot');\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const message = { id: Date.now(), text: this.newMessage, isUser: true };\n        this.messages.push(message);\n        this.newMessage = '';\n\n        try {\n          const response = await axios.post('http://localhost:8000/api/chat', message);\n          console.log('Response:', response.data);\n          // Optionally, add response data to messages\n          this.messages.push({ id: Date.now(), text: response.data.message, isUser: false });\n        } catch (error) {\n          console.error('Error sending message:', error);\n          alert('Failed to send message to the server.');\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chatbot-bubble {\n  position: fixed;\n  bottom: 110px;\n  right: 40px;\n  width: 300px;\n  height: 450px;\n  background-color: #f9f9f9;\n  border: 1px solid #e0e0e0;\n  border-radius: 15px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  font-family: 'Roboto', sans-serif;\n}\n\n.chatbot-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 15px 15px 0 0;\n  font-size: 18px;\n}\n\n.chatbot-header h4 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.chatbot-header .close-btn {\n  background: transparent;\n  border: none;\n  font-size: 24px;\n  color: white;\n  cursor: pointer;\n}\n\n.chatbot-body {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  font-size: 14px;\n  line-height: 1.6;\n  color: #333;\n}\n\n.message {\n  margin: 5px 0;\n  padding: 10px;\n  border-radius: 10px;\n  max-width: 80%;\n  word-wrap: break-word;\n}\n\n.user-message {\n  background-color: #cce5ff;\n  align-self: flex-end;\n  text-align: right;\n  color: #004085;\n}\n\n.chatbot-message {\n  background-color: #d1ecf1;\n  align-self: flex-start;\n  text-align: left;\n  color: #0c5460;\n}\n\n.chatbot-footer {\n  padding: 15px;\n  border-top: 1px solid #e0e0e0;\n  background-color: #f1f1f1;\n}\n\n.chatbot-footer form {\n  display: flex;\n}\n\n.chatbot-footer input {\n  flex: 1;\n  padding: 12px;\n  border: 1px solid #ccc;\n  border-radius: 25px;\n  font-size: 14px;\n  transition: border-color 0.3s;\n}\n\n.chatbot-footer input:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n.chatbot-footer .send-btn {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 25px;\n  padding: 12px 20px;\n  margin-left: 10px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.chatbot-footer .send-btn:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,CAAC,WAAW,CAAC;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,CACR;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,kCAAkC;QAAEC,MAAM,EAAE;MAAM;IAErE,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACC,KAAK,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,IAAI,CAACR,UAAU,CAACS,IAAI,CAAC,MAAM,EAAE,EAAE;QACjC,MAAMC,OAAM,GAAI;UAAER,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC;UAAET,IAAI,EAAE,IAAI,CAACH,UAAU;UAAEI,MAAM,EAAE;QAAK,CAAC;QACvE,IAAI,CAACH,QAAQ,CAACY,IAAI,CAACH,OAAO,CAAC;QAC3B,IAAI,CAACV,UAAS,GAAI,EAAE;QAEpB,IAAI;UACF,MAAMc,QAAO,GAAI,MAAMlB,KAAK,CAACmB,IAAI,CAAC,gCAAgC,EAAEL,OAAO,CAAC;UAC5EM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAACf,IAAI,CAAC;UACvC;UACA,IAAI,CAACE,QAAQ,CAACY,IAAI,CAAC;YAAEX,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC;YAAET,IAAI,EAAEW,QAAQ,CAACf,IAAI,CAACW,OAAO;YAAEN,MAAM,EAAE;UAAM,CAAC,CAAC;QACpF,EAAE,OAAOc,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;UAC9CC,KAAK,CAAC,uCAAuC,CAAC;QAChD;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}