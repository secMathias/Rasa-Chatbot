{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'ChatbotBubble',\n  props: ['isVisible'],\n  data() {\n    return {\n      newMessage: '',\n      messages: []\n    };\n  },\n  methods: {\n    closeChatbot() {\n      this.$emit('toggle-chatbot');\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const message = {\n          id: Date.now(),\n          text: this.newMessage\n        };\n        this.messages.push(message);\n        this.newMessage = '';\n        try {\n          const response = await axios.post('http://localhost:8000/api/chat', message);\n          console.log('Response:', response.data);\n          // Optionally, add response data to messages\n          this.messages.push({\n            id: Date.now(),\n            text: response.data.message\n          });\n        } catch (error) {\n          console.error('Error sending message:', error);\n          alert('Failed to send message to the server.');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","data","newMessage","messages","methods","closeChatbot","$emit","sendMessage","trim","message","id","Date","now","text","push","response","post","console","log","error","alert"],"sources":["/Users/maclaptop/Documents/VSCode/VUE_Chatbot/vue-chatbot/src/components/ChatbotBubble.vue"],"sourcesContent":["<template>\n  <div v-if=\"isVisible\" class=\"chatbot-bubble\">\n    <div class=\"chatbot-header\">\n      <h4>Chatbot</h4>\n      <button @click=\"closeChatbot\" class=\"close-btn\">&times;</button>\n    </div>\n    <div class=\"chatbot-body\">\n      <p>Hello! How can I help you today?</p>\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"message\">\n        <p>{{ message.text }}</p>\n      </div>\n    </div>\n    <div class=\"chatbot-footer\">\n      <form @submit.prevent=\"sendMessage\">\n        <input \n          type=\"text\" \n          v-model=\"newMessage\" \n          placeholder=\"Type a message...\" \n          @keyup.enter=\"sendMessage\"\n        />\n        <button type=\"submit\" class=\"send-btn\">Send</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ChatbotBubble',\n  props: ['isVisible'],\n  data() {\n    return {\n      newMessage: '',\n      messages: []\n    };\n  },\n  methods: {\n    closeChatbot() {\n      this.$emit('toggle-chatbot');\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const message = { id: Date.now(), text: this.newMessage };\n        this.messages.push(message);\n        this.newMessage = '';\n\n        try {\n          const response = await axios.post('http://localhost:8000/api/chat', message);\n          console.log('Response:', response.data);\n          // Optionally, add response data to messages\n          this.messages.push({ id: Date.now(), text: response.data.message });\n        } catch (error) {\n          console.error('Error sending message:', error);\n          alert('Failed to send message to the server.');\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chatbot-bubble {\n  position: fixed;\n  bottom: 100px;\n  right: 40px;\n  width: 300px;\n  height: 450px;\n  background-color: #f9f9f9;\n  border: 1px solid #e0e0e0;\n  border-radius: 15px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  font-family: 'Roboto', sans-serif;\n}\n\n.chatbot-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 15px 15px 0 0;\n  font-size: 18px;\n}\n\n.chatbot-header h4 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.chatbot-header .close-btn {\n  background: transparent;\n  border: none;\n  font-size: 24px;\n  color: white;\n  cursor: pointer;\n}\n\n.chatbot-body {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  font-size: 14px;\n  line-height: 1.6;\n  color: #333;\n}\n\n.chatbot-body p {\n  margin: 0;\n}\n\n.message {\n  margin: 5px 0;\n}\n\n.chatbot-footer {\n  padding: 15px;\n  border-top: 1px solid #e0e0e0;\n  background-color: #f1f1f1;\n}\n\n.chatbot-footer form {\n  display: flex;\n}\n\n.chatbot-footer input {\n  flex: 1;\n  padding: 12px;\n  border: 1px solid #ccc;\n  border-radius: 25px;\n  font-size: 14px;\n  transition: border-color 0.3s;\n}\n\n.chatbot-footer input:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n.chatbot-footer .send-btn {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 25px;\n  padding: 12px 20px;\n  margin-left: 10px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.chatbot-footer .send-btn:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";AA2BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,CAAC,WAAW,CAAC;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACC,KAAK,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,IAAI,CAACL,UAAU,CAACM,IAAI,CAAC,MAAM,EAAE,EAAE;QACjC,MAAMC,OAAM,GAAI;UAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;UAAEC,IAAI,EAAE,IAAI,CAACX;QAAW,CAAC;QACzD,IAAI,CAACC,QAAQ,CAACW,IAAI,CAACL,OAAO,CAAC;QAC3B,IAAI,CAACP,UAAS,GAAI,EAAE;QAEpB,IAAI;UACF,MAAMa,QAAO,GAAI,MAAMjB,KAAK,CAACkB,IAAI,CAAC,gCAAgC,EAAEP,OAAO,CAAC;UAC5EQ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAACd,IAAI,CAAC;UACvC;UACA,IAAI,CAACE,QAAQ,CAACW,IAAI,CAAC;YAAEJ,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;YAAEC,IAAI,EAAEE,QAAQ,CAACd,IAAI,CAACQ;UAAQ,CAAC,CAAC;QACrE,EAAE,OAAOU,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;UAC9CC,KAAK,CAAC,uCAAuC,CAAC;QAChD;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}