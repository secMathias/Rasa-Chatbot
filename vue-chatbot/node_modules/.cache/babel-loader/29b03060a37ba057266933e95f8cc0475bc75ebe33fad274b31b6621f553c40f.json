{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'ChatbotBubble',\n  props: ['isVisible'],\n  data() {\n    return {\n      newMessage: '',\n      messages: [{\n        id: 0,\n        text: 'Hello! I am the chatbot in service of Elite. Ask me something.',\n        isUser: false\n      }]\n    };\n  },\n  methods: {\n    closeChatbot() {\n      this.$emit('toggle-chatbot');\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const userMessage = {\n          id: Date.now(),\n          text: this.newMessage,\n          isUser: true\n        };\n        this.messages.push(userMessage);\n        this.newMessage = '';\n        this.scrollToBottom();\n        try {\n          // Send the message to Rasa's REST endpoint\n          const response = await axios.post('http://localhost:5005/webhooks/rest/webhook', {\n            sender: 'user',\n            // a unique identifier for each conversation\n            message: userMessage.text\n          });\n\n          // Rasa returns an array of responses, which could contain multiple messages\n          if (response.data && response.data.length) {\n            response.data.forEach(botMessage => {\n              this.messages.push({\n                id: Date.now(),\n                text: botMessage.text,\n                isUser: false\n              });\n            });\n          } else {\n            this.messages.push({\n              id: Date.now(),\n              text: \"Sorry, I didn't get that.\",\n              isUser: false\n            });\n          }\n          this.scrollToBottom();\n        } catch (error) {\n          console.error('Error connecting to the Rasa server:', error);\n          this.messages.push({\n            id: Date.now(),\n            text: 'Error: Could not connect to the server.',\n            isUser: false\n          });\n        }\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBody = this.$refs.chatBody;\n        chatBody.scrollTop = chatBody.scrollHeight;\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","data","newMessage","messages","id","text","isUser","methods","closeChatbot","$emit","sendMessage","trim","userMessage","Date","now","push","scrollToBottom","response","post","sender","message","length","forEach","botMessage","error","console","$nextTick","chatBody","$refs","scrollTop","scrollHeight"],"sources":["/Users/maclaptop/Documents/VSCode/VUE_Chatbot_2.0/vue-chatbot/src/components/ChatbotBubble.vue"],"sourcesContent":["<template>\n  <div v-if=\"isVisible\" class=\"chatbot-bubble\">\n    <div class=\"chatbot-header\">\n      <h4>Chatbot</h4>\n      <button @click=\"closeChatbot\" class=\"close-btn\">&times;</button>\n    </div>\n    <div class=\"chatbot-body\" ref=\"chatBody\">\n      <div \n        v-for=\"message in messages\" \n        :key=\"message.id\" \n        :class=\"['message', message.isUser ? 'user-message' : 'chatbot-message']\"\n      >\n        <p>{{ message.text }}</p>\n      </div>\n    </div>\n    <div class=\"chatbot-footer\">\n      <form @submit.prevent=\"sendMessage\">\n        <input \n          type=\"text\" \n          v-model=\"newMessage\" \n          placeholder=\"Type a message...\" \n          @keyup.enter=\"sendMessage\"\n        />\n        <button type=\"submit\" class=\"send-btn\">Send</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ChatbotBubble',\n  props: ['isVisible'],\n  data() {\n    return {\n      newMessage: '',\n      messages: [\n        { id: 0, text: 'Hello! I am the chatbot in service of Elite. Ask me something.', isUser: false }\n      ]\n    };\n  },\n  methods: {\n    closeChatbot() {\n      this.$emit('toggle-chatbot');\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const userMessage = { id: Date.now(), text: this.newMessage, isUser: true };\n        this.messages.push(userMessage);\n        this.newMessage = '';\n        this.scrollToBottom();\n\n        try {\n          // Send the message to Rasa's REST endpoint\n          const response = await axios.post('http://localhost:5005/webhooks/rest/webhook', {\n            sender: 'user', // a unique identifier for each conversation\n            message: userMessage.text\n          });\n\n          // Rasa returns an array of responses, which could contain multiple messages\n          if (response.data && response.data.length) {\n            response.data.forEach((botMessage) => {\n              this.messages.push({\n                id: Date.now(),\n                text: botMessage.text,\n                isUser: false\n              });\n            });\n          } else {\n            this.messages.push({\n              id: Date.now(),\n              text: \"Sorry, I didn't get that.\",\n              isUser: false\n            });\n          }\n\n          this.scrollToBottom();\n        } catch (error) {\n          console.error('Error connecting to the Rasa server:', error);\n          this.messages.push({\n            id: Date.now(),\n            text: 'Error: Could not connect to the server.',\n            isUser: false\n          });\n        }\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBody = this.$refs.chatBody;\n        chatBody.scrollTop = chatBody.scrollHeight;\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your existing styles here */\n.chatbot-bubble {\n  position: fixed;\n  bottom: 110px;\n  right: 40px;\n  width: 300px;\n  height: 450px;\n  background-color: #f9f9f9;\n  border: 1px solid #e0e0e0;\n  border-radius: 15px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  font-family: 'Roboto', sans-serif;\n}\n\n.chatbot-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 15px 15px 0 0;\n  font-size: 18px;\n}\n\n.chatbot-header h4 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.chatbot-header .close-btn {\n  background: transparent;\n  border: none;\n  font-size: 24px;\n  color: white;\n  cursor: pointer;\n}\n\n.chatbot-body {\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #333;\n  display: flex;\n  flex-direction: column;\n}\n\n.message {\n  margin: 3px 0;\n  padding: 8px 10px;\n  border-radius: 10px;\n  max-width: 70%;\n  word-wrap: break-word;\n  display: inline-block;\n}\n\n.user-message {\n  background-color: #007bff;\n  color: white;\n  align-self: flex-end;\n  text-align: right;\n}\n\n.chatbot-message {\n  background-color: #0056b3;\n  color: white;\n  align-self: flex-start;\n  text-align: left;\n}\n\n.chatbot-footer {\n  padding: 10px;\n  border-top: 1px solid #e0e0e0;\n  background-color: #f1f1f1;\n}\n\n.chatbot-footer form {\n  display: flex;\n}\n\n.chatbot-footer input {\n  flex: 1;\n  padding: 8px 10px;\n  border: 1px solid #ccc;\n  border-radius: 25px;\n  font-size: 14px;\n  transition: border-color 0.3s;\n}\n\n.chatbot-footer input:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n.chatbot-footer .send-btn {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 25px;\n  padding: 8px 15px;\n  margin-left: 10px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.chatbot-footer .send-btn:hover {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,CAAC,WAAW,CAAC;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,CACR;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,gEAAgE;QAAEC,MAAM,EAAE;MAAM;IAEnG,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACC,KAAK,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,IAAI,CAACR,UAAU,CAACS,IAAI,CAAC,MAAM,EAAE,EAAE;QACjC,MAAMC,WAAU,GAAI;UAAER,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC;UAAET,IAAI,EAAE,IAAI,CAACH,UAAU;UAAEI,MAAM,EAAE;QAAK,CAAC;QAC3E,IAAI,CAACH,QAAQ,CAACY,IAAI,CAACH,WAAW,CAAC;QAC/B,IAAI,CAACV,UAAS,GAAI,EAAE;QACpB,IAAI,CAACc,cAAc,CAAC,CAAC;QAErB,IAAI;UACF;UACA,MAAMC,QAAO,GAAI,MAAMnB,KAAK,CAACoB,IAAI,CAAC,6CAA6C,EAAE;YAC/EC,MAAM,EAAE,MAAM;YAAE;YAChBC,OAAO,EAAER,WAAW,CAACP;UACvB,CAAC,CAAC;;UAEF;UACA,IAAIY,QAAQ,CAAChB,IAAG,IAAKgB,QAAQ,CAAChB,IAAI,CAACoB,MAAM,EAAE;YACzCJ,QAAQ,CAAChB,IAAI,CAACqB,OAAO,CAAEC,UAAU,IAAK;cACpC,IAAI,CAACpB,QAAQ,CAACY,IAAI,CAAC;gBACjBX,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC;gBACdT,IAAI,EAAEkB,UAAU,CAAClB,IAAI;gBACrBC,MAAM,EAAE;cACV,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,OAAO;YACL,IAAI,CAACH,QAAQ,CAACY,IAAI,CAAC;cACjBX,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC;cACdT,IAAI,EAAE,2BAA2B;cACjCC,MAAM,EAAE;YACV,CAAC,CAAC;UACJ;UAEA,IAAI,CAACU,cAAc,CAAC,CAAC;QACvB,EAAE,OAAOQ,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;UAC5D,IAAI,CAACrB,QAAQ,CAACY,IAAI,CAAC;YACjBX,EAAE,EAAES,IAAI,CAACC,GAAG,CAAC,CAAC;YACdT,IAAI,EAAE,yCAAyC;YAC/CC,MAAM,EAAE;UACV,CAAC,CAAC;QACJ;MACF;IACF,CAAC;IACDU,cAAcA,CAAA,EAAG;MACf,IAAI,CAACU,SAAS,CAAC,MAAM;QACnB,MAAMC,QAAO,GAAI,IAAI,CAACC,KAAK,CAACD,QAAQ;QACpCA,QAAQ,CAACE,SAAQ,GAAIF,QAAQ,CAACG,YAAY;MAC5C,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}